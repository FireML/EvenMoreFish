/*
 * This file is generated by jOOQ.
 */
package com.oheers.fish.database.generated.mysql.tables.records;


import com.oheers.fish.database.generated.mysql.tables.Fish;

import java.time.LocalDateTime;

import org.jooq.Record2;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class FishRecord extends UpdatableRecordImpl<FishRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>${table.prefix}fish.FISH_NAME</code>.
     */
    public void setFishName(String value) {
        set(0, value);
    }

    /**
     * Getter for <code>${table.prefix}fish.FISH_NAME</code>.
     */
    public String getFishName() {
        return (String) get(0);
    }

    /**
     * Setter for <code>${table.prefix}fish.FISH_RARITY</code>.
     */
    public void setFishRarity(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>${table.prefix}fish.FISH_RARITY</code>.
     */
    public String getFishRarity() {
        return (String) get(1);
    }

    /**
     * Setter for <code>${table.prefix}fish.FIRST_FISHER</code>.
     */
    public void setFirstFisher(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>${table.prefix}fish.FIRST_FISHER</code>.
     */
    public String getFirstFisher() {
        return (String) get(2);
    }

    /**
     * Setter for <code>${table.prefix}fish.TOTAL_CAUGHT</code>.
     */
    public void setTotalCaught(Integer value) {
        set(3, value);
    }

    /**
     * Getter for <code>${table.prefix}fish.TOTAL_CAUGHT</code>.
     */
    public Integer getTotalCaught() {
        return (Integer) get(3);
    }

    /**
     * Setter for <code>${table.prefix}fish.LARGEST_FISH</code>.
     */
    public void setLargestFish(Float value) {
        set(4, value);
    }

    /**
     * Getter for <code>${table.prefix}fish.LARGEST_FISH</code>.
     */
    public Float getLargestFish() {
        return (Float) get(4);
    }

    /**
     * Setter for <code>${table.prefix}fish.LARGEST_FISHER</code>.
     */
    public void setLargestFisher(String value) {
        set(5, value);
    }

    /**
     * Getter for <code>${table.prefix}fish.LARGEST_FISHER</code>.
     */
    public String getLargestFisher() {
        return (String) get(5);
    }

    /**
     * Setter for <code>${table.prefix}fish.SHORTEST_LENGTH</code>.
     */
    public void setShortestLength(Float value) {
        set(6, value);
    }

    /**
     * Getter for <code>${table.prefix}fish.SHORTEST_LENGTH</code>.
     */
    public Float getShortestLength() {
        return (Float) get(6);
    }

    /**
     * Setter for <code>${table.prefix}fish.SHORTEST_FISHER</code>.
     */
    public void setShortestFisher(String value) {
        set(7, value);
    }

    /**
     * Getter for <code>${table.prefix}fish.SHORTEST_FISHER</code>.
     */
    public String getShortestFisher() {
        return (String) get(7);
    }

    /**
     * Setter for <code>${table.prefix}fish.FIRST_CATCH_TIME</code>.
     */
    public void setFirstCatchTime(LocalDateTime value) {
        set(8, value);
    }

    /**
     * Getter for <code>${table.prefix}fish.FIRST_CATCH_TIME</code>.
     */
    public LocalDateTime getFirstCatchTime() {
        return (LocalDateTime) get(8);
    }

    /**
     * Setter for <code>${table.prefix}fish.DISCOVERER</code>.
     */
    public void setDiscoverer(String value) {
        set(9, value);
    }

    /**
     * Getter for <code>${table.prefix}fish.DISCOVERER</code>.
     */
    public String getDiscoverer() {
        return (String) get(9);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record2<String, String> key() {
        return (Record2) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached FishRecord
     */
    public FishRecord() {
        super(Fish.FISH);
    }

    /**
     * Create a detached, initialised FishRecord
     */
    public FishRecord(String fishName, String fishRarity, String firstFisher, Integer totalCaught, Float largestFish, String largestFisher, Float shortestLength, String shortestFisher, LocalDateTime firstCatchTime, String discoverer) {
        super(Fish.FISH);

        setFishName(fishName);
        setFishRarity(fishRarity);
        setFirstFisher(firstFisher);
        setTotalCaught(totalCaught);
        setLargestFish(largestFish);
        setLargestFisher(largestFisher);
        setShortestLength(shortestLength);
        setShortestFisher(shortestFisher);
        setFirstCatchTime(firstCatchTime);
        setDiscoverer(discoverer);
        resetChangedOnNotNull();
    }
}
