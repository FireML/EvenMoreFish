/*
 * This file is generated by jOOQ.
 */
package com.oheers.fish.database.generated.mysql.tables;


import com.oheers.fish.database.generated.mysql.DefaultSchema;
import com.oheers.fish.database.generated.mysql.Keys;
import com.oheers.fish.database.generated.mysql.tables.records.UsersRecord;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Users extends TableImpl<UsersRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>${table.prefix}users</code>
     */
    public static final Users USERS = new Users();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UsersRecord> getRecordType() {
        return UsersRecord.class;
    }

    /**
     * The column <code>${table.prefix}users.ID</code>.
     */
    public final TableField<UsersRecord, Integer> ID = createField(DSL.name("ID"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>${table.prefix}users.UUID</code>.
     */
    public final TableField<UsersRecord, String> UUID = createField(DSL.name("UUID"), SQLDataType.VARCHAR(128).nullable(false), this, "");

    /**
     * The column <code>${table.prefix}users.FIRST_FISH</code>.
     */
    public final TableField<UsersRecord, String> FIRST_FISH = createField(DSL.name("FIRST_FISH"), SQLDataType.VARCHAR(256).nullable(false), this, "");

    /**
     * The column <code>${table.prefix}users.LAST_FISH</code>.
     */
    public final TableField<UsersRecord, String> LAST_FISH = createField(DSL.name("LAST_FISH"), SQLDataType.VARCHAR(256).nullable(false), this, "");

    /**
     * The column <code>${table.prefix}users.LARGEST_FISH</code>.
     */
    public final TableField<UsersRecord, String> LARGEST_FISH = createField(DSL.name("LARGEST_FISH"), SQLDataType.VARCHAR(256).nullable(false), this, "");

    /**
     * The column <code>${table.prefix}users.SHORTEST_FISH</code>.
     */
    public final TableField<UsersRecord, String> SHORTEST_FISH = createField(DSL.name("SHORTEST_FISH"), SQLDataType.VARCHAR(256).nullable(false), this, "");

    /**
     * The column <code>${table.prefix}users.LARGEST_LENGTH</code>.
     */
    public final TableField<UsersRecord, Float> LARGEST_LENGTH = createField(DSL.name("LARGEST_LENGTH"), SQLDataType.REAL.nullable(false), this, "");

    /**
     * The column <code>${table.prefix}users.SHORTEST_LENGTH</code>.
     */
    public final TableField<UsersRecord, Float> SHORTEST_LENGTH = createField(DSL.name("SHORTEST_LENGTH"), SQLDataType.REAL.nullable(false), this, "");

    /**
     * The column <code>${table.prefix}users.NUM_FISH_CAUGHT</code>.
     */
    public final TableField<UsersRecord, Integer> NUM_FISH_CAUGHT = createField(DSL.name("NUM_FISH_CAUGHT"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>${table.prefix}users.TOTAL_FISH_LENGTH</code>.
     */
    public final TableField<UsersRecord, Float> TOTAL_FISH_LENGTH = createField(DSL.name("TOTAL_FISH_LENGTH"), SQLDataType.REAL.nullable(false), this, "");

    /**
     * The column <code>${table.prefix}users.COMPETITIONS_WON</code>.
     */
    public final TableField<UsersRecord, Integer> COMPETITIONS_WON = createField(DSL.name("COMPETITIONS_WON"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>${table.prefix}users.COMPETITIONS_JOINED</code>.
     */
    public final TableField<UsersRecord, Integer> COMPETITIONS_JOINED = createField(DSL.name("COMPETITIONS_JOINED"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>${table.prefix}users.FISH_SOLD</code>.
     */
    public final TableField<UsersRecord, Integer> FISH_SOLD = createField(DSL.name("FISH_SOLD"), SQLDataType.INTEGER.defaultValue(DSL.field(DSL.raw("0"), SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>${table.prefix}users.MONEY_EARNED</code>.
     */
    public final TableField<UsersRecord, Double> MONEY_EARNED = createField(DSL.name("MONEY_EARNED"), SQLDataType.DOUBLE.defaultValue(DSL.field(DSL.raw("0"), SQLDataType.DOUBLE)), this, "");

    private Users(Name alias, Table<UsersRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Users(Name alias, Table<UsersRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>${table.prefix}users</code> table reference
     */
    public Users(String alias) {
        this(DSL.name(alias), USERS);
    }

    /**
     * Create an aliased <code>${table.prefix}users</code> table reference
     */
    public Users(Name alias) {
        this(alias, USERS);
    }

    /**
     * Create a <code>${table.prefix}users</code> table reference
     */
    public Users() {
        this(DSL.name("${table.prefix}users"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<UsersRecord, Integer> getIdentity() {
        return (Identity<UsersRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<UsersRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_A3;
    }

    @Override
    public List<UniqueKey<UsersRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.CONSTRAINT_A);
    }

    @Override
    public Users as(String alias) {
        return new Users(DSL.name(alias), this);
    }

    @Override
    public Users as(Name alias) {
        return new Users(alias, this);
    }

    @Override
    public Users as(Table<?> alias) {
        return new Users(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Users rename(String name) {
        return new Users(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Users rename(Name name) {
        return new Users(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Users rename(Table<?> name) {
        return new Users(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Users where(Condition condition) {
        return new Users(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Users where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Users where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Users where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Users where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Users where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Users where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Users where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Users whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Users whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
